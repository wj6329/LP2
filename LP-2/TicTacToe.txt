class TicTacToeState:
    def __init__(self, board, player):
        self.board = board
        self.player = player

    def is_goal_state(self):
        return self.check_winner() or self.is_draw()

    def is_draw(self):
        return len(self.get_valid_moves()) == 0

    def get_valid_moves(self):
        moves = []
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == "":
                    moves.append((i, j))
        return moves

    def check_winner(self):
        b = self.board
        for i in range(3):
            if b[i][0] == b[i][1] == b[i][2] != "":
                return b[i][0]
            if b[0][i] == b[1][i] == b[2][i] != "":
                return b[0][i]
        if b[0][0] == b[1][1] == b[2][2] != "":
            return b[0][0]
        if b[0][2] == b[1][1] == b[2][0] != "":
            return b[0][2]
        return None

    def make_move(self, move):
        i, j = move
        new_board = [row[:] for row in self.board]
        new_board[i][j] = self.player
        new_player = "O" if self.player == "X" else "X"
        return TicTacToeState(new_board, new_player)

    def calculate_cost(self):
        winner = self.check_winner()
        if winner == "X":
            return 1
        elif winner == "O":
            return -1
        else:
            return 0

    def get_moves(self):
        return [(i, j) for i in range(3) for j in range(3)]


# A* search algorithm
def tic_tac_toe_a_star(state):
    if state.is_goal_state():
        return []

    valid_moves = state.get_valid_moves()
    moves_scores = [(move, state.make_move(move).calculate_cost()) for move in valid_moves]
    moves_scores.sort(key=lambda x: x[1], reverse=True)

    for move, _ in moves_scores:
        next_state = state.make_move(move)
        optimal_moves = tic_tac_toe_a_star(next_state)
        if optimal_moves is not None:
            return [move] + optimal_moves

    return None


# Example game
initial_board = [["", "", ""], ["", "", ""], ["", "", ""]]
initial_player = "X"
initial_state = TicTacToeState(initial_board, initial_player)

optimal_moves = tic_tac_toe_a_star(initial_state)

if optimal_moves:
    print("Optimal Moves:")
    for i, move in enumerate(optimal_moves, start=1):
        print(f"Move {i}: Player {initial_player} moves to position {move[0]}, {move[1]}")
else:
    print("No optimal moves found. The game is either already won or a draw.")